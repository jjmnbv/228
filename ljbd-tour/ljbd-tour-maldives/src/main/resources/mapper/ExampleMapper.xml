<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="Example">

	<resultMap id="RM.Example" type="com.ljbd.tour.maldives.model.Example">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="yn" column="yn"/>
        <result property="creatTime" column="creat_time"/>
        <result property="updateTime" column="update_time"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="Example.columns">
	    <![CDATA[
		id,name,email,yn,creat_time,update_time
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="Example.insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO example (
        	id ,
        	name ,
        	email ,
        	yn ,
        	creat_time ,
        	update_time 
        ) VALUES (
        	#{id} ,
        	#{name} ,
        	#{email} ,
        	#{yn} ,
        	#{creatTime} ,
        	#{updateTime} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="Example.update" >
    <![CDATA[
        UPDATE example SET
	        name = #{name} ,
	        email = #{email} ,
	        yn = #{yn} ,
	        creat_time = #{creatTime} ,
	        update_time = #{updateTime} 
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="Example.delete">
    <![CDATA[
        DELETE FROM example WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="Example.getById" resultMap="RM.Example">
		SELECT <include refid="Example.columns" />
	    <![CDATA[
		    FROM example 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<sql id="Example.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(name)">
				AND name = #{name}
			</if>
	       <if test="@Ognl@isNotEmpty(email)">
				AND email = #{email}
			</if>
	       <if test="@Ognl@isNotEmpty(yn)">
				AND yn = #{yn}
			</if>
	       <if test="@Ognl@isNotEmpty(creatTimeBegin)">
				AND creat_time >= #{creatTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(creatTimeEnd)">
				AND creat_time &lt;= #{creatTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND update_time >= #{updateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND update_time &lt;= #{updateTimeEnd}
		   </if>
		</where>
	</sql>
		
    <select id="Example.findPage.count" resultType="long">
        SELECT count(*) FROM example 
		<include refid="Example.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="Example.findPage" resultMap="RM.Example">
    	SELECT <include refid="Example.columns" />
	    FROM example 
		<include refid="Example.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

