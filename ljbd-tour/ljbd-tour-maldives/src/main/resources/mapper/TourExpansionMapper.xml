<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="TourExpansion">

	<resultMap id="RM.TourExpansion" type="com.ljbd.tour.maldives.model.TourExpansion">
        <result property="id" column="id"/>
        <result property="tourProductId" column="tour_product_id"/>
        <result property="categoryI" column="category_i"/>
        <result property="categoryIname" column="category_i_name"/>
        <result property="categoryIi" column="category_ii"/>
        <result property="categoryIiName" column="category_ii_name"/>
        <result property="categoryIii" column="category_iii"/>
        <result property="categoryIiiName" column="category_iii_name"/>
        <result property="categoryAssisted" column="category_assisted"/>
        <result property="categoryContent" column="category_content"/>
        <result property="sequence" column="sequence"/>
        <result property="remark" column="remark"/>
        <result property="extensibleMarkup" column="extensible_markup"/>
        <result property="createDate" column="create_date"/>
        <result property="createName" column="create_name"/>
        <result property="updateDate" column="update_date"/>
        <result property="updateName" column="update_name"/>
        <result property="sysVersion" column="sys_version"/>
        <result property="yn" column="yn"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="TourExpansion.columns">
	    <![CDATA[
		id,tour_product_id,category_i,category_i_name,category_ii,category_ii_name,category_iii,category_iii_name,category_assisted,category_content,sequence,remark,extensible_markup,create_date,create_name,update_date,update_name,sys_version,yn
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="TourExpansion.insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO tour_expansion (
        	id ,
        	tour_product_id ,
        	category_i ,
        	category_i_name ,
        	category_ii ,
        	category_ii_name ,
        	category_iii ,
        	category_iii_name ,
        	category_assisted ,
        	category_content ,
        	sequence ,
        	remark ,
        	extensible_markup ,
        	create_date ,
        	create_name ,
        	update_date ,
        	update_name ,
        	sys_version ,
        	yn 
        ) VALUES (
        	#{id} ,
        	#{tourProductId} ,
        	#{categoryI} ,
        	#{categoryIname} ,
        	#{categoryIi} ,
        	#{categoryIiName} ,
        	#{categoryIii} ,
        	#{categoryIiiName} ,
        	#{categoryAssisted} ,
        	#{categoryContent} ,
        	#{sequence} ,
        	#{remark} ,
        	#{extensibleMarkup} ,
        	#{createDate} ,
        	#{createName} ,
        	#{updateDate} ,
        	#{updateName} ,
        	#{sysVersion} ,
        	#{yn} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="TourExpansion.update" >
    <![CDATA[
        UPDATE tour_expansion SET
	        tour_product_id = #{tourProductId} ,
	        category_i = #{categoryI} ,
	        category_i_name = #{categoryIname} ,
	        category_ii = #{categoryIi} ,
	        category_ii_name = #{categoryIiName} ,
	        category_iii = #{categoryIii} ,
	        category_iii_name = #{categoryIiiName} ,
	        category_assisted = #{categoryAssisted} ,
	        category_content = #{categoryContent} ,
	        sequence = #{sequence} ,
	        remark = #{remark} ,
	        extensible_markup = #{extensibleMarkup} ,
	        create_date = #{createDate} ,
	        create_name = #{createName} ,
	        update_date = #{updateDate} ,
	        update_name = #{updateName} ,
	        sys_version = #{sysVersion} ,
	        yn = #{yn} 
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="TourExpansion.delete">
    <![CDATA[
        DELETE FROM tour_expansion WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="TourExpansion.getById" resultMap="RM.TourExpansion">
		SELECT <include refid="TourExpansion.columns" />
	    <![CDATA[
		    FROM tour_expansion 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<sql id="TourExpansion.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(tourProductId)">
				AND tour_product_id = #{tourProductId}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryI)">
				AND category_i = #{categoryI}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryIname)">
				AND category_i_name = #{categoryIname}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryIi)">
				AND category_ii = #{categoryIi}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryIiName)">
				AND category_ii_name = #{categoryIiName}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryIii)">
				AND category_iii = #{categoryIii}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryIiiName)">
				AND category_iii_name = #{categoryIiiName}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryAssisted)">
				AND category_assisted = #{categoryAssisted}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryContent)">
				AND category_content = #{categoryContent}
			</if>
	       <if test="@Ognl@isNotEmpty(sequence)">
				AND sequence = #{sequence}
			</if>
	       <if test="@Ognl@isNotEmpty(remark)">
				AND remark = #{remark}
			</if>
	       <if test="@Ognl@isNotEmpty(extensibleMarkup)">
				AND extensible_markup = #{extensibleMarkup}
			</if>
	       <if test="@Ognl@isNotEmpty(createDateBegin)">
				AND create_date >= #{createDateBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createDateEnd)">
				AND create_date &lt;= #{createDateEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(createName)">
				AND create_name = #{createName}
			</if>
	       <if test="@Ognl@isNotEmpty(updateDateBegin)">
				AND update_date >= #{updateDateBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateDateEnd)">
				AND update_date &lt;= #{updateDateEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateName)">
				AND update_name = #{updateName}
			</if>
	       <if test="@Ognl@isNotEmpty(sysVersion)">
				AND sys_version = #{sysVersion}
			</if>
	       <if test="@Ognl@isNotEmpty(yn)">
				AND yn = #{yn}
			</if>
		</where>
	</sql>
		
    <select id="TourExpansion.findPage.count" resultType="long">
        SELECT count(*) FROM tour_expansion 
		<include refid="TourExpansion.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="TourExpansion.findPage" resultMap="RM.TourExpansion">
    	SELECT <include refid="TourExpansion.columns" />
	    FROM tour_expansion 
		<include refid="TourExpansion.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

